#!/usr/bin/env sh
# SPDX-License-Identifier: CC-BY-4.0
set -u
LC_ALL=C
export LC_ALL
umask 022

archive=:
case $0 in
*tag)
	archive=false;;
esac

Echo() {
	printf '%s\n' "$*"
}

Echon() {
	printf '%s' "$*"
}

EchoExec() {
	Echo "# $*"
	case ${1} in
	*=)
		eval "$*"
		return;;
	esac
	"$@"
}

Fatal() {
	Echo "${0##*/}: $1" >&2
	exit 1
}

Warning() {
	Echo "${0##*/}: warning: $*" >&2
}

Usage() {
	if $archive
	then	help='
Create (and optionally sign) a tarball for a release, and sign
all other tarballs in the directory.

The format of the tarball corresponds to that from github,
so that you can use the signature file for the release without
downloading that tarball first: This way, the problem is avoided
that unsigned data is transferred over the net before signing.

Note that to get byte-identical zip files (as necessary for signing),
the timezone of the generating servers must be identical.
The script sets the timezone to PST8PDT (of the github servers) by default,
but you can override this by some options.
'
		extraopts='[tag (or commit)]
-c     Specify commit instead of tag; use main if not specified.
       Default to unsigned
-z     Keep zip file archive; by default only .tar.gz is kept
-X     Do not keep .tar.gz
-x     Create .xpi file. You might want to combine this with -Xa
-p     Set TZ to ":/usr/share/zoneinfo/US/Pacific-New" for zip file generation
-P VAL Set TZ to VAL. If VAL is empty or "-", do not modify TZ'
	else	help='[tag]
Tag a release (reminding about possible signing) or remove a tag.'
		extraopts='[tag]
-d     Delete tag (locally)
-D     Delete tag (locally and remotely)
-r     Remove tag (remotely)'
	fi
	Echo "Usage: ${0##*/} [options] $help
-s     Sign$signdefaulttext
-a     Do not sign$unsigndefaulttext
-t     Set GPG_TTY to current tty (default)
-T     Do not modify GPG_TTY$extraopts
-f     Force even if tag does not start with v
-h     Show this help"
	exit ${1:-1}
}

if [ -n "${GPG_TTY++}" ]
then	signdefault=:
	signdefaulttext=' (default since $GPG_TTY is set)'
	unsigndefaulttext=
else	signdefault=false
	signdefaulttext=
	unsigndefaulttext=' (default since $GPG_TTY is unset)'
fi

if $archive
then	addopt=zxXpcP:
else	addopt=dDr
fi

tz=PST8PDT
gettty=:
commit=false
force=false
delete=false
remove=false
createxpi=false
keepzip=false
keeptgz=:
sign=
OPTIND=1
while getopts "ftTsahH$addopt" opt
do	case $opt in
	s)	sign=:;;
	a)	sign=false;;
	p)	tz=':/usr/share/zoneinfo/US/Pacific-New';;
	P)	tz=$OPTARG;;
	d)	delete=:;;
	D)	delete=:
		remove=:;;
	r)	remove=:;;
	c)	commit=:
		signdefault=false;;
	t)	gettty=:;;
	T)	gettty=false;;
	f)	force=:;;
	x)	createxpi=:;;
	X)	keeptgz=false;;
	z)	keepzip=:;;
	'?')	exit 1;;
	*)	Usage 0;;
	esac
done
shift $(( $OPTIND - 1 ))

dir=`git rev-parse --show-toplevel 2>/dev/null` && [ -n "$dir" ] \
	&& test -d "$dir/.git" || Fatal 'not in a git repository'

cd "$dir" >/dev/null 2>&1 || Fatal "cannot cd to $dir"

: ${sign:=$signdefault}
if $sign
then	tagtext=signed
else	tagtext=unsigned
fi

if [ $# -gt 0 ]
then	tag=$1
elif $commit
then	tag=main
else	EchoExec PAGER= git tag -ln --sort=version:refname
	latesttag=`git describe --abbrev=0 2>/dev/null` || latesttag=
	if [ -z "${latesttag:++}" ]
	then	Echo 'Latest tag cannot be determined'
	else	Echo "$latesttag		(latest tag)"
	fi
	if $archive
	then	Echon "Enter tag for $tagtext tarball (default: $latesttag): "
	elif $delete || $remove
	then	if $delete
		then	if $remove
			then	remtext='remove locally+remotely'
			else	remtext='delete locally'
			fi
		else	remtext='remove remotely'
		fi
		Echon "Enter tag to $remtext (default: $latesttag): "
	else	Echon "Enter new tag for $tagtext commit: "
	fi
	read -r tag
	if $archive || $delete || $remove
	then	[ -n "${tag:++}" ] || tag=$latesttag
	fi
fi

shorttag=$tag
if $commit
then	tag=`git rev-parse "$tag"` || Fatal 'cannot git rev-parse commit'
	case ${tag:-/} in
	*[!0123456789abcdef]*)
		Fatal 'strange output of git rev-parse';;
	esac
else	case ${tag:-/} in
	*[!.0123456789_abcdefghijklmnopqrstuvwxyz]*)
		Fatal 'illegal tag';;
	esac
	! $force && case $tag in
	v*)
		shorttag=${tag#v}
		false;;
	esac && Fatal 'tag must start with v'
fi

GetRemote() {
	remote=`git rev-parse --abbrev-ref --symbolic-full-name '@{upstream}'` \
	&& case ${remote:-x} in
	*/*)
		:;;
	*)
		false;;
	esac || {
		remote=origin/main
		Warning "cannot determine remote branch. using $remote"
	}
}

if $delete || $remove
then	! $delete || EchoExec git tag -d "$tag"
	if $remove
	then	GetRemote
		origin=${remote%%/*}
		EchoExec git push "$origin" ":refs/tags/$tag"
	fi
	exit
fi

if $gettty
then	GPG_TTY=`tty` && [ -n "${GPG_TTY:++}" ] && export GPG_TTY \
		|| unset GPG_TTY
fi

if ! $archive
then	if $sign
	then	tagopt=-s
	else	tagopt=-a
	fi
	git tag $tagopt "$tag" -m "Release $tag" || exit
	Echo "Tagged successfully $tag release ($tagtext)"
	exit
fi

name=${PWD##*/}
name=${name%.git}
n=$name-$shorttag
if $sign || $keeptgz
then	EchoExec git archive --prefix="$n/" -o "$n".tar.gz "$tag"
fi
$sign || $keepzip || $createxpi || exit 0
(
	[ "${tz:--}" = '-' ] || {
		TZ=$tz
		export TZ
		Echo "# export TZ=\"$tz\""
	}
	if $sign || $keepzip
	then	EchoExec git archive --prefix="$n/" -o "$n".zip "$tag"
	fi
	if $createxpi
	then	EchoExec git archive --format=zip -o "$n".xpi "$tag"
	fi
)
$sign || exit 0

for i in "$n".tar "$n".tar.* "$n".zip "$n".xpi
do	case $i in
	*.asc)
		continue;;
	esac
	test -f "$i" || continue
	EchoExec gpg --armor --detach-sign "$i"
done
$keepzip || rm -vf -- "$n".zip
$keeptgz || rm -vf -- "$n".tar.gz
